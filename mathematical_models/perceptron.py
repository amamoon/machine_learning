# -*- coding: utf-8 -*-
"""FinalQ2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KYxwb3M-OmIn-dmwMa2oGJPhBG0kx0OD
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import itertools
from sklearn.linear_model import Perceptron



lstone_x = list(itertools.product([0, 1], repeat=3))
lsttwo_x = list(itertools.product([0, 1], repeat=3))
lstthree_x = list(itertools.product([0, 1], repeat=4))
lstfour_x = list(itertools.product([0, 1], repeat=7))
x1 = np.array(lstone_x)
x2 = np.array(lsttwo_x)
x3 = np.array(lstthree_x)
x4 = np.array(lstfour_x)

def get_y(true_val, x_list):
    ret_y = np.zeros(shape=len(x_list))
    i = 0
    for x in x_list:
        to_str =""
        for y in x:
            to_str += str(y)
        if to_str in true_val:
            #print(to_str)
            ret_y[i] = 1
        i += 1
    return ret_y


y_list = ["1000000", "1000001", "1000101"]
y4 = get_y(y_list, lstfour_x)
y_list = ["0100", "0101", "0110", "1000", "1100", "1101", "1110", "1111"]
y3 = get_y(y_list, lstthree_x)
y_list = ["011","100","110","111"]
y2 = get_y(y_list, lsttwo_x)
y_list = ["010", "011", "100", "111"]
y1 = get_y(y_list, lstone_x)
print(y1)

def train_perceptron(learning_rate, x, y, iter):
    perceptron = Perceptron(max_iter=10000, random_state=0, shuffle=False, verbose=True, tol= 0)
    clf = perceptron.fit(x,y)
    pred = clf.predict(x)
    print(clf.score(x,y))

train_perceptron(1, x1, y1, 10000)
train_perceptron(1, x2, y2, 10000)
train_perceptron(1, x3, y3, 10000)
train_perceptron(1, x4, y4, 10000)
